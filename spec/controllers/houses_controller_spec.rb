require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe HousesController do

  # This should return the minimal set of attributes required to create a valid
  # House. As you add validations to House, be sure to
  # adjust the attributes here as well.
  let(:valid_attributes) { { "name" => "MyString" } }

  # This should return the minimal set of values that should be in the session
  # in order to pass any filters (e.g. authentication) defined in
  # HousesController. Be sure to keep this updated too.
  let(:valid_session) { {} }

  before :each do
    @house = FactoryGirl.create(:house, :name => "house1")
    @admin_member = FactoryGirl.create(:member, :email => "foo1@bar.com", :username => "foo1", :house => @house, :name => 'test1', :role => 'admin')
    @non_admin_member = FactoryGirl.create(:member, :email => "foo2@bar.com", :username => "foo2", :house => @house, :name => 'test1')
    @other_house = FactoryGirl.create(:house, :name => "house2")
    @other_house_member = FactoryGirl.create(:member, :email => "foo3@bar.com", :username => "foo3", :house => @other_house, :name => 'test1', :role => 'admin')
  end

  describe "GET index" do
    it "assigns all houses as @houses for admin" do
      sign_in @admin_member
      get_index_validations
    end

    it "assigns all houses as @houses for non-admin" do
      sign_in @non_admin_member
      get_index_validations
    end

    def get_index_validations
      get :index, {}, valid_session
      assigns(:houses).should eq([@house, @other_house])
    end
  end

  describe "GET show" do
    it "assigns the requested house as @house for admin" do
      sign_in @admin_member
      get_show_validations
    end

    it "assigns the requested house as @house for non-admin" do
      sign_in @non_admin_member
      get_show_validations
    end

    def get_show_validations
      get :show, {:id => @house.to_param}, valid_session
      assigns(:house).should eq(@house)
    end
  end

  describe "GET edit" do
    it "assigns the requested house as @house for admin" do
      sign_in @admin_member
      get :edit, {:id => @house.to_param}, valid_session
      assigns(:house).should eq(@house)
    end

    it "redirect to 404 for non-admin" do
      sign_in @non_admin_member
      get :edit, {:id => @house.to_param}, valid_session
      response.should redirect_to '/404.html'
    end

    it "redirect to 404 for other house member" do
      sign_in @other_house_member
      get :edit, {:id => @house.to_param}, valid_session
      response.should redirect_to '/404.html'
    end
  end

  describe "PUT update" do
    describe "admin" do
      before :each do
        sign_in @admin_member
      end

      describe "with valid params" do
        it "updates the requested house for admin" do
          House.any_instance.should_receive(:update_attributes).with({ "name" => "MyString" })
          put :update, {:id => @house.to_param, :house => { "name" => "MyString" }}, valid_session
        end

        it "assigns the requested house as @house" do
          put :update, {:id => @house.to_param, :house => valid_attributes}, valid_session
          assigns(:house).should eq(@house)
        end

        it "redirects to the house" do
          put :update, {:id => @house.to_param, :house => valid_attributes}
          response.should redirect_to(@house)
        end
      end
    end

    describe "non-admin" do
      it "should redirect to 404" do
        sign_in @non_admin_member
        put :update, {:id => @house.to_param, :house => { "name" => "MyString" }}, valid_session
        response.should redirect_to('/404.html')
      end
    end

    describe "other house member" do
      it "should redirect to 404" do
        sign_in @other_house_member
        put :update, {:id => @house.to_param, :house => { "name" => "MyString" }}, valid_session
        response.should redirect_to('/404.html')
      end
    end
  end
end
